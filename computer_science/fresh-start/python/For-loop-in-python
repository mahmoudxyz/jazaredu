## Introduction:

In Python, a for loop is used to iterate over a sequence of values such as a list, tuple, string, or range. It executes a block of code for each value in the sequence until all values have been processed. The for loop is one of the most frequently used control structures in Python.

## Syntax:
The basic syntax of a for loop in Python is:



```
for variable in sequence:
    # block of code
```

Here, the `variable` takes on each value in the sequence one at a time, and the block of code is executed for each value.

Example:

```
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    print(fruit)
```

```
Output:
apple
banana
cherry
```

In this example, we created a list of fruits and used a for loop to iterate over each fruit in the list and print it out.

## Range function in for loop:

We can also use the range function with a for loop to iterate over a sequence of numbers. The range function generates a sequence of numbers, starting from 0 by default, and increments by 1 (also by default) until the specified number is reached.

Example:

```
for i in range(5):
    print(i)
```


```
Output:

0
1
2
3
4
```

In this example, we used the range function to generate a sequence of numbers from 0 to 4 and used a for loop to iterate over each number and print it out.

## Nested for loop:

We can also use nested for loops to iterate over multiple sequences. In a nested loop, the inner loop runs completely for each iteration of the outer loop.

Example:


```
fruits = ["apple", "banana", "cherry"]
colors = ["red", "yellow", "green"]

for fruit in fruits:
    for color in colors:
        print(fruit, color)
```


```
Output:

apple red
apple yellow
apple green
banana red
banana yellow
banana green
cherry red
cherry yellow
cherry green
```

In this example, we used nested for loops to iterate over two sequences, fruits and colors, and print out each combination. 

It's important to note that for every element in the outer loop, the inner loop must finish running for each iteration of the outer loop. Therefore, the inner loop runs as many times as there are iterations of the outer loop.

## Break statement:

We can use a `break` statement to exit a for loop prematurely. The break statement can be useful when we are searching for a particular value in a sequence and want to stop iterating once we find it.

Example:

```
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    if fruit == "banana":
        break
    print(fruit)
```

```
Output:

apple
```

In this example, we used a break statement to exit the for loop once we find the value "banana" in the sequence.

## Continue statement:

We can use a continue statement to skip to the next iteration of a for loop. The continue statement can be useful when we want to skip over certain values in a sequence.

Example:

```
fruits = ["apple", "banana", "cherry"]
for fruit in fruits:
    if fruit == "banana":
        continue
    print(fruit)
```


```
Output:

apple
cherry
```

In this example, we used a `continue` statement to skip over the value "banana" in the sequence and continue iterating over the rest of the values.

## Conclusion:

In Python, for loops are used to iterate over a sequence of values such as a list, tuple, string, or range. We can also use the range function with a for loop to iterate over a sequence of numbers. Nested for loops can be used to iterate over multiple sequences. We can use break and continue statements